unit Persisto.SQLServer;

interface

uses Data.DB, Persisto, Persisto.Mapping;

type
  TDatabaseManipulatorSQLServer = class(TDatabaseManipulator, IDatabaseManipulator)
  private
    function CreateDatabase(const DatabaseName: String): String;
    function DropDatabase(const DatabaseName: String): String;
    function ExtractFixedValue(const Expression: String): String;
    function GetAutoGeneratedDefinition(const AutoGenerated: TAutoGeneratedType): String;
    function GetDefaultDatabaseName: String;
    function GetDefaultValue(const Field: TField): String;
    function GetFieldType(const FieldType: TTypeKind): String;
    function GetMaxNameSize: Integer;
    function GetSchemaTablesScripts: TArray<String>;
    function GetSpecialFieldType(const SpecialType: TDatabaseSpecialType): String;
    function MakeInsertStatement(const Table: TTable; const Params: TParams): String;
  end;

implementation

uses System.Rtti, System.TypInfo, System.SysUtils, System.Classes;

{ TDatabaseManipulatorSQLServer }

function TDatabaseManipulatorSQLServer.CreateDatabase(const DatabaseName: String): String;
begin
  Result := Format('create database %s', [DatabaseName]);
end;

function TDatabaseManipulatorSQLServer.DropDatabase(const DatabaseName: String): String;
begin
  Result := Format('use master;'#13#10'alter database %0:s set single_user with rollback immediate;'#13#10'drop database if exists %0:s;', [DatabaseName]);
end;

function TDatabaseManipulatorSQLServer.ExtractFixedValue(const Expression: String): String;
begin
  Result := Expression.Substring(1, Expression.Length - 2);
end;

function TDatabaseManipulatorSQLServer.GetAutoGeneratedDefinition(const AutoGenerated: TAutoGeneratedType): String;
const
  INTERNAL_FUNCTIONS: array [TAutoGeneratedType] of String = ('', 'CONVERT([date],getdate())', 'CONVERT([time],getdate())', 'getdate()', 'newsequentialid()', 'NEXT VALUE FOR [%s]', '%s');

begin
  Result := Format('(%s)', [INTERNAL_FUNCTIONS[AutoGenerated]]);
end;

function TDatabaseManipulatorSQLServer.GetDefaultDatabaseName: String;
begin
  Result := 'master';
end;

function TDatabaseManipulatorSQLServer.GetDefaultValue(const Field: TField): String;
begin
  var DefaultConstraint := Field.DefaultConstraint;
  var SequenceName := EmptyStr;

  if Assigned(DefaultConstraint.Sequence) then
    SequenceName := DefaultConstraint.Sequence.Name;

  Result := Format(GetAutoGeneratedDefinition(DefaultConstraint.AutoGeneratedType), [SequenceName + DefaultConstraint.FixedValue]);
end;

function TDatabaseManipulatorSQLServer.GetFieldType(const FieldType: TTypeKind): String;
begin
  case FieldType of
    tkInteger:
      Result := 'int';
    tkEnumeration:
      Result := 'tinyint';
    tkFloat:
      Result := 'numeric';
    tkChar, tkWChar:
      Result := 'char';
    tkInt64:
      Result := 'bigint';
    tkString, tkLString, tkWString, tkUString:
      Result := 'varchar';
  else
    Result := EmptyStr;
  end;
end;

function TDatabaseManipulatorSQLServer.GetMaxNameSize: Integer;
begin
  Result := 128;
end;

function TDatabaseManipulatorSQLServer.GetSchemaTablesScripts: TArray<String>;
const
  DEFAULT_CONSTRAINT_SQL =
    '''
    select cast(parent_object_id as varchar(20)) + '.' + cast(parent_column_id as varchar(20)) Id,
           name,
           definition Value
      from sys.default_constraints
    ''';

  FOREING_KEY_SQL =
    '''
    select cast(FK.object_id as varchar(20)) Id,
           FK.name,
           RC.name ReferenceField,
           cast(FK.referenced_object_id as varchar(20)) IdReferenceTable,
           cast(FK.parent_object_id as varchar(20)) IdTable
      from sys.foreign_keys FK
      join sys.foreign_key_columns FKC
        on FKC.constraint_object_id = FK.object_id
      join sys.columns RC
        on RC.object_id = FKC.parent_object_id
       and RC.column_id = FKC.parent_column_id
    ''';

  SEQUENCES_SQL =
    '''
    select cast(object_id as varchar(20)) Id,
            name
      from sys.sequences
    ''';

  TABLE_SQL =
    '''
       select cast(T.object_id as varchar(20)) Id,
              T.name
         from sys.tables T
    left join sys.key_constraints PK
           on PK.parent_object_id = T.object_id
          and PK.type = 'PK'
    ''';

  COLUMNS_SQL =
    '''
    select cast(C.object_id as varchar(20)) + '.' + cast(C.column_id as varchar(20)) Id,
           (select cast(DF.parent_object_id as varchar(20)) + '.' + cast(DF.parent_column_id as varchar(20))
              from sys.default_constraints DF
             where DF.parent_object_id = C.object_id
               and DF.parent_column_id = C.column_id) IdDefaultConstraint,
           cast(T.object_id as varchar(20)) IdTable,
           case system_type_id
              -- String
              when 167 then iif(max_length = -1, 0, 5)
              when 231 then iif(max_length = -1, 0, 5)
              -- Integer
              when 56 then 1
              -- Char
              when 175 then 2
              when 239 then 2
              -- Enumeration
              when 48 then 3
              -- Float
              when 108 then 4
              -- Int64
              when 127 then 16
              else 0
           end FieldType,
           C.name,
           iif(C.is_nullable = 0, 1, 0) Required,
           C.scale Scale,
           case
              when system_type_id in (231, 239) then C.max_length / 2
              when system_type_id = 108 then C.precision
              else C.max_length
           end Size,
           case system_type_id
              -- Date
              when 40 then 1
              -- DateTime
              when 61 then 2
              -- Time
              when 41 then 3
              -- Text
              when 167 then iif(max_length = -1, 4, 0)
              when 231 then iif(max_length = -1, 4, 0)
              -- Unique Identifier
              when 36 then 5
              -- Boolean
              when 104 then 6
              -- Binary
              when 165 then 7
              else 0
           end SpecialType
      from sys.columns C
      join sys.tables T
        on T.object_id = C.object_id
    ''';

  INDEX_SQL =
    '''
    select cast(I.object_id as varchar(20)) + '.' + cast(I.index_id as varchar(20)) Id,
           cast(I.object_id as varchar(20)) IdTable,
           I.name,
           I.is_primary_key IsPrimaryKey,
           I.is_unique IsUnique
      from sys.indexes I
      join sys.tables T
        on T.object_id = I.object_id
     where I.index_id > 0
    ''';

  INDEX_FIELDS_SQL =
    '''
    select cast(IC.object_id as varchar(20)) + '.' + cast(IC.index_id as varchar(20)) + '.' + cast(IC.index_column_id as varchar(20)) Id,
           cast(IC.object_id as varchar(20)) + '.' + cast(IC.column_id as varchar(20)) IdField,
           cast(IC.object_id as varchar(20)) + '.' + cast(IC.index_id as varchar(20)) IdIndex,
           IC.index_column_id Position
      from sys.index_columns IC
      join sys.tables T
        on T.object_id = IC.object_id
     where IC.index_id > 0
    ''';

  function CreateView(const Name, SQL: String): String;
  begin
    Result := Format('create or alter view PersistoDatabase%s as (%s)', [Name, SQL]);
  end;

begin
  Result := [
    CreateView('DefaultConstraint', DEFAULT_CONSTRAINT_SQL),
    CreateView('ForeignKey', FOREING_KEY_SQL),
    CreateView('Index', INDEX_SQL),
    CreateView('IndexField', INDEX_FIELDS_SQL),
    CreateView('Sequence', SEQUENCES_SQL),
    CreateView('Table', TABLE_SQL),
    CreateView('TableField', COLUMNS_SQL)
    ];
end;

function TDatabaseManipulatorSQLServer.GetSpecialFieldType(const SpecialType: TDatabaseSpecialType): String;
const
  FIELD_SPECIAL_TYPE_MAPPING: array [TDatabaseSpecialType] of String = ('', 'date', 'datetime', 'time', 'varchar(max)', 'uniqueidentifier', 'bit', 'varbinary(max)');

begin
  Result := FIELD_SPECIAL_TYPE_MAPPING[SpecialType];
end;

function TDatabaseManipulatorSQLServer.MakeInsertStatement(const Table: TTable; const Params: TParams): String;
begin
  var FieldNames := EmptyStr;
  var ParamNames := EmptyStr;
  var ReturningFields := EmptyStr;

  for var A := 0 to Pred(Params.Count) do
  begin
    if not FieldNames.IsEmpty then
    begin
      FieldNames := FieldNames + ',';
      ParamNames := ParamNames + ',';
    end;

    FieldNames := FieldNames + Params[A].Name;
    ParamNames := ParamNames + ':' + Params[A].Name;
  end;

  for var Field in Table.ReturningFields do
  begin
    if not ReturningFields.IsEmpty then
      ReturningFields := ReturningFields + ',';

    ReturningFields := ReturningFields + Format('Inserted.%s', [Field.DatabaseName]);
  end;

  Result := 'insert into %0:s';

  if Params.Count > 0 then
    Result := Result + '(%1:s)';

  if not ReturningFields.IsEmpty then
    Result := Result + Format(' output %s ', [ReturningFields]);

  if Params.Count = 0 then
    Result := Result + 'default values'
  else
    Result := Result + 'values(%2:s)';

  Result := Format(Result, [Table.DatabaseName, FieldNames, ParamNames]);
end;

end.

